/*global angular */

/**
 * The main TodoMVC app module
 *
 * @type {angular.Module}
 */
'use strict';

angular.module('todomvc', ['ngRoute']).config(function ($routeProvider) {
	'use strict';

	var routeConfig = {
		controller: 'TodoCtrl',
		templateUrl: 'todomvc-index.html',
		resolve: {
			store: function store(todoStorage) {
				// Get the correct module (API or localStorage).
				return todoStorage.then(function (module) {
					module.get(); // Fetch the todo records in the background.
					return module;
				});
			}
		}
	};

	$routeProvider.when('/', routeConfig).when('/:status', routeConfig).otherwise({
		redirectTo: '/'
	});
});

/*global angular */

/**
 * The main controller for the app. The controller:
 * - retrieves and persists the model via the todoStorage service
 * - exposes the model to the template and provides event handlers
 */
angular.module('todomvc').controller('TodoCtrl', function TodoCtrl($scope, $routeParams, $filter, store) {
	'use strict';

	var todos = $scope.todos = store.todos;

	$scope.newTodo = '';
	$scope.editedTodo = null;

	$scope.$watch('todos', function () {
		$scope.remainingCount = $filter('filter')(todos, { completed: false }).length;
		$scope.completedCount = todos.length - $scope.remainingCount;
		$scope.allChecked = !$scope.remainingCount;
	}, true);

	// Monitor the current route for changes and adjust the filter accordingly.
	$scope.$on('$routeChangeSuccess', function () {
		var status = $scope.status = $routeParams.status || '';
		$scope.statusFilter = status === 'active' ? { completed: false } : status === 'completed' ? { completed: true } : {};
	});

	$scope.addTodo = function () {
		var newTodo = {
			title: $scope.newTodo.trim(),
			completed: false
		};

		if (!newTodo.title) {
			return;
		}

		$scope.saving = true;
		store.insert(newTodo).then(function success() {
			$scope.newTodo = '';
		})['finally'](function () {
			$scope.saving = false;
		});
	};

	$scope.editTodo = function (todo) {
		$scope.editedTodo = todo;
		// Clone the original todo to restore it on demand.
		$scope.originalTodo = angular.extend({}, todo);
	};

	$scope.saveEdits = function (todo, event) {
		// Blur events are automatically triggered after the form submit event.
		// This does some unfortunate logic handling to prevent saving twice.
		if (event === 'blur' && $scope.saveEvent === 'submit') {
			$scope.saveEvent = null;
			return;
		}

		$scope.saveEvent = event;

		if ($scope.reverted) {
			// Todo edits were reverted-- don't save.
			$scope.reverted = null;
			return;
		}

		todo.title = todo.title.trim();

		if (todo.title === $scope.originalTodo.title) {
			$scope.editedTodo = null;
			return;
		}

		store[todo.title ? 'put' : 'delete'](todo).then(function success() {}, function error() {
			todo.title = $scope.originalTodo.title;
		})['finally'](function () {
			$scope.editedTodo = null;
		});
	};

	$scope.revertEdits = function (todo) {
		todos[todos.indexOf(todo)] = $scope.originalTodo;
		$scope.editedTodo = null;
		$scope.originalTodo = null;
		$scope.reverted = true;
	};

	$scope.removeTodo = function (todo) {
		store['delete'](todo);
	};

	$scope.saveTodo = function (todo) {
		store.put(todo);
	};

	$scope.toggleCompleted = function (todo, completed) {
		if (angular.isDefined(completed)) {
			todo.completed = completed;
		}
		store.put(todo, todos.indexOf(todo)).then(function success() {}, function error() {
			todo.completed = !todo.completed;
		});
	};

	$scope.clearCompletedTodos = function () {
		store.clearCompleted();
	};

	$scope.markAll = function (completed) {
		todos.forEach(function (todo) {
			if (todo.completed !== completed) {
				$scope.toggleCompleted(todo, completed);
			}
		});
	};
});

/*global angular */

/**
 * Services that persists and retrieves todos from localStorage or a backend API
 * if available.
 *
 * They both follow the same API, returning promises for all changes to the
 * model.
 */
angular.module('todomvc').factory('todoStorage', function ($http, $injector) {
	'use strict';

	// Detect if an API backend is present. If so, return the API module, else
	// hand off the localStorage adapter
	return $http.get('/api').then(function () {
		return $injector.get('api');
	}, function () {
		return $injector.get('localStorage');
	});
}).factory('api', function ($http) {
	'use strict';

	var store = {
		todos: [],

		clearCompleted: function clearCompleted() {
			var originalTodos = store.todos.slice(0);

			var completeTodos = [];
			var incompleteTodos = [];
			store.todos.forEach(function (todo) {
				if (todo.completed) {
					completeTodos.push(todo);
				} else {
					incompleteTodos.push(todo);
				}
			});

			angular.copy(incompleteTodos, store.todos);

			return $http['delete']('/api/todos').then(function success() {
				return store.todos;
			}, function error() {
				angular.copy(originalTodos, store.todos);
				return originalTodos;
			});
		},

		'delete': function _delete(todo) {
			var originalTodos = store.todos.slice(0);

			store.todos.splice(store.todos.indexOf(todo), 1);

			return $http['delete']('/api/todos/' + todo.id).then(function success() {
				return store.todos;
			}, function error() {
				angular.copy(originalTodos, store.todos);
				return originalTodos;
			});
		},

		get: function get() {
			return $http.get('/api/todos').then(function (resp) {
				angular.copy(resp.data, store.todos);
				return store.todos;
			});
		},

		insert: function insert(todo) {
			var originalTodos = store.todos.slice(0);

			return $http.post('/api/todos', todo).then(function success(resp) {
				todo.id = resp.data.id;
				store.todos.push(todo);
				return store.todos;
			}, function error() {
				angular.copy(originalTodos, store.todos);
				return store.todos;
			});
		},

		put: function put(todo) {
			var originalTodos = store.todos.slice(0);

			return $http.put('/api/todos/' + todo.id, todo).then(function success() {
				return store.todos;
			}, function error() {
				angular.copy(originalTodos, store.todos);
				return originalTodos;
			});
		}
	};

	return store;
}).factory('localStorage', function ($q) {
	'use strict';

	var STORAGE_ID = 'todos-angularjs';

	var store = {
		todos: [],

		_getFromLocalStorage: function _getFromLocalStorage() {
			return JSON.parse(localStorage.getItem(STORAGE_ID) || '[]');
		},

		_saveToLocalStorage: function _saveToLocalStorage(todos) {
			localStorage.setItem(STORAGE_ID, JSON.stringify(todos));
		},

		clearCompleted: function clearCompleted() {
			var deferred = $q.defer();

			var completeTodos = [];
			var incompleteTodos = [];
			store.todos.forEach(function (todo) {
				if (todo.completed) {
					completeTodos.push(todo);
				} else {
					incompleteTodos.push(todo);
				}
			});

			angular.copy(incompleteTodos, store.todos);

			store._saveToLocalStorage(store.todos);
			deferred.resolve(store.todos);

			return deferred.promise;
		},

		'delete': function _delete(todo) {
			var deferred = $q.defer();

			store.todos.splice(store.todos.indexOf(todo), 1);

			store._saveToLocalStorage(store.todos);
			deferred.resolve(store.todos);

			return deferred.promise;
		},

		get: function get() {
			var deferred = $q.defer();

			angular.copy(store._getFromLocalStorage(), store.todos);
			deferred.resolve(store.todos);

			return deferred.promise;
		},

		insert: function insert(todo) {
			var deferred = $q.defer();

			store.todos.push(todo);

			store._saveToLocalStorage(store.todos);
			deferred.resolve(store.todos);

			return deferred.promise;
		},

		put: function put(todo, index) {
			var deferred = $q.defer();

			store.todos[index] = todo;

			store._saveToLocalStorage(store.todos);
			deferred.resolve(store.todos);

			return deferred.promise;
		}
	};

	return store;
});

/*global angular */

/**
 * Directive that executes an expression when the element it is applied to gets
 * an `escape` keydown event.
 */
angular.module('todomvc').directive('todoEscape', function () {
	'use strict';

	var ESCAPE_KEY = 27;

	return function (scope, elem, attrs) {
		elem.bind('keydown', function (event) {
			if (event.keyCode === ESCAPE_KEY) {
				scope.$apply(attrs.todoEscape);
			}
		});

		scope.$on('$destroy', function () {
			elem.unbind('keydown');
		});
	};
});

/*global angular */

/**
 * Directive that places focus on the element it is applied to when the
 * expression it binds to evaluates to true
 */
angular.module('todomvc').directive('todoFocus', function todoFocus($timeout) {
	'use strict';

	return function (scope, elem, attrs) {
		scope.$watch(attrs.todoFocus, function (newVal) {
			if (newVal) {
				$timeout(function () {
					elem[0].focus();
				}, 0, false);
			}
		});
	};
});

//# sourceMappingURL=data:application/json;base64,
