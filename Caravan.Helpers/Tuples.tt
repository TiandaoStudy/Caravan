<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
//
// Tuples.cs
// 
// Author(s):
//     Alessio Parma <alessio.parma@finsa.it>
//
// The MIT License (MIT)
// 
// Copyright (c) 2014-2024 Finsa S.p.A. <finsa@finsa.it>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections;
using System.Collections.Generic;

namespace Finsa.Caravan
{
	[Serializable]
    public abstract class GTuple : IList<object>
    {
<# for (var i = 1; i <= TupleTypeCount; ++i) { #>
        public static GTuple<<#= GenericsFor(i) #>> Create<<#= GenericsFor(i) #>>(<#= ParamsAndTypesFor(i) #>)
        {
            var tuple = new GTuple<<#= GenericsFor(i) #>>();
<# for (var j = 1; j <= i; ++j) { #>
            tuple.Item<#= j #> = item<#= j #>;
<# } #>
            return tuple;
        }

<# } #>

        #region IList<object> Members

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public abstract IEnumerator<object> GetEnumerator();

        public void Add(object item)
        {
            throw new NotImplementedException(ErrorMessages.TopLevel_Tuple_NotFullCollection);
        }

        public void Clear()
        {
            throw new NotImplementedException(ErrorMessages.TopLevel_Tuple_NotFullCollection);
        }

        public abstract bool Contains(object item);

        public abstract void CopyTo(object[] array, int arrayIndex);

        public bool Remove(object item)
        {
            throw new NotImplementedException(ErrorMessages.TopLevel_Tuple_NotFullCollection);
        }

        public abstract int Count { get; }

        public bool IsReadOnly
        {
            get { return false; }
        }

        public abstract int IndexOf(object item);

        public void Insert(int index, object item)
        {
            throw new NotImplementedException(ErrorMessages.TopLevel_Tuple_NotFullCollection);
        }

        public void RemoveAt(int index)
        {
            throw new NotImplementedException(ErrorMessages.TopLevel_Tuple_NotFullCollection);
        }

        public abstract object this[int index] { get; set; }

        #endregion

    }

<# for (var i = 1; i <= TupleTypeCount; ++i) { #>
    /// <summary>
    ///   TODO
    /// </summary>
	[Serializable]
    public sealed class GTuple<<#= GenericsFor(i) #>> : GTuple, IEquatable<GTuple<<#= GenericsFor(i) #>>>
    {
<# for (var j = 1; j <= i; ++j) { #>
        public T<#= j #> Item<#= j #> { get; set; }
<# } #>
        
        #region IEquatable<GTuple<<#= GenericsFor(i) #>>> Members

        public bool Equals(GTuple<<#= GenericsFor(i) #>> other)
        {
            return true
<# for (var j = 1; j <= i; ++j) { #>
                && EqualityComparer<T<#= j #>>.Default.Equals(Item<#= j #>, other.Item<#= j #>)
<# } #>            ;
        }

        #endregion

        #region Object Members

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) {
                return false;
            }
            if (ReferenceEquals(this, obj)) {
                return true;
            }
            return obj is GTuple<<#= GenericsFor(i) #>> && Equals((GTuple<<#= GenericsFor(i) #>>) obj);
        }

        public override int GetHashCode()
        {
            unchecked {
                return 0
<# for (var j = 1; j <= i; ++j) { #>
                ^ EqualityComparer<T<#= j #>>.Default.GetHashCode(Item<#= j #>)
<# } #>                ;
            }
        }

        public static bool operator ==(GTuple<<#= GenericsFor(i) #>> left, GTuple<<#= GenericsFor(i) #>> right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GTuple<<#= GenericsFor(i) #>> left, GTuple<<#= GenericsFor(i) #>> right)
        {
            return !Equals(left, right);
        }

        public override string ToString()
        {
            return string.Format("<#= StringFormatFor(i) #>", <#= ItemsFor(i) #>);
        }

        #endregion

        #region IList<object> Members

        public override IEnumerator<object> GetEnumerator()
        {
<# for (var j = 1; j <= i; ++j) { #>
            yield return Item<#= j #>;
<# } #> 
        }

        public override bool Contains(object item)
        {
            return false
<# for (var j = 1; j <= i; ++j) { #>
                || Equals(Item<#= j #>, item)
<# } #>            ;
        }

        public override void CopyTo(object[] array, int arrayIndex)
        {
<# for (var j = 1; j <= i; ++j) { #>
            array[arrayIndex + <#= j-1 #>] = Item<#= j #>;
<# } #>
        }

        public override int Count
        {
            get { return <#= i #>; }
        }

        public override int IndexOf(object item)
        {
            return
<# for (var j = 1; j <= i; ++j) { #>
                   Equals(Item<#= j #>, item) ? <#= j-1 #> :
<# } #>            -1;
        }

        public override object this[int index]
        {
            get
            {
                return 
<# for (var j = 1; j <= i; ++j) { #>
                       (index == <#= j-1 #>) ? Item<#= j #> :
<# } #>                (object) null;
            }
            set
            {
                switch (index) {
<# for (var j = 1; j <= i; ++j) { #>
                    case <#= j-1 #>:
                        Item<#= j #> = (T<#= j #>) value;
                        break;
<# } #>
                }
            }
        }

        #endregion
    }

<# } #>
}

<#+ // Functions used throughout the template

const int TupleTypeCount = 21;

static string GenericsFor(int c)
{
	Debug.Assert(c >= 1);
	var builder = new StringBuilder("T1");
	for (var i = 2; i <= c; ++i)
	{
		builder.AppendFormat(", T{0}", i);
	}
	return builder.ToString();
}

static string ItemsFor(int c)
{
	Debug.Assert(c >= 1);
	var builder = new StringBuilder("Item1");
	for (var i = 2; i <= c; ++i)
	{
		builder.AppendFormat(", Item{0}", i);
	}
	return builder.ToString();
}

static string ParamsFor(int c)
{
	Debug.Assert(c >= 1);
	var builder = new StringBuilder("item1");
	for (var i = 2; i <= c; ++i)
	{
		builder.AppendFormat(", item{0}", i);
	}
	return builder.ToString();
}

static string ParamsAndTypesFor(int c)
{
	Debug.Assert(c >= 1);
	var builder = new StringBuilder("T1 item1");
	for (var i = 2; i <= c; ++i)
	{
		builder.AppendFormat(", T{0} item{0}", i);
	}
	return builder.ToString();
}

static string ParamsDocCommentFor(int c)
{
	const string template = @"        /// <param name=""item{0}"">Parameter {0}.</param>";
	var builder = new StringBuilder();
	for (var i = 1; i <= c; ++i)
	{
		var line = String.Format(template, i);
		if (i == c) builder.Append(line);
		else builder.AppendLine(line);
	}
	return builder.ToString();
}

static string StringFormatFor(int c)
{
    const string template = @"Item{0}: [{{{1}}}]";
    var builder = new StringBuilder();
	for (var i = 1; i <= c; ++i)
	{
		var line = String.Format(template, i, i - 1);
        builder.Append(line);
		if (i != c) builder.Append(", ");
	}
	return builder.ToString();
}

#>